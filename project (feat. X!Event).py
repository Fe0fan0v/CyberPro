from base64 import b64encode as enc64
from telebot import types
from exif import Image
import numpy as np
import tempfile
import logging
import telebot
import time
import os

# -------------------------------------------------------------------------------------------------------------------------------------
bot = telebot.TeleBot('1813697722:AAHP7kjaJrZ5iMOSxnUgX_nmYT5LBMTd-0A')
output_data = {}
is_complain = False


# -------------------------------------------------------------------------------------------------------------------------------------
def write_message(message, text):
    try:
        bot.send_message(message.chat.id, text)
    except Exception as error_message:
        logging.error(str(error_message) + "  ‚îã  " + time.ctime() + "\n")


def photo_download(message):
    try:
        file_info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        current_file_exstension = (str(file_info.file_path)).split('.')[-1]
        temp_dir = tempfile.mkdtemp()
        src = temp_dir + fr'\saved_photo.{current_file_exstension}'
        with open(src, 'wb') as new_file:
            new_file.write(downloaded_file)
            new_file.close()

        # -----------------------------------------------------------------------------------------------------------------------------

        with open(src, 'rb') as f:
            output_data["image-bite"] = enc64(f.read())
            f.close()

        # -----------------------------------------------------------------------------------------------------------------------------

        with open(src, 'rb') as image_file:
            if Image(image_file).has_exif:
                position = get_exif(src)
                if position:
                    output_data["pos"] = position
                else:
                    asc_location(message)
            else:
                asc_location(message)

        # -----------------------------------------------------------------------------------------------------------------------------

        if message.text:
            output_data["complaint"] = message.text
        else:
            output_data["complaint"] = message.caption

    except Exception as error_message:
        logging.error(str(error_message) + "  ‚îã  " + time.ctime() + "\n")


def get_exif(directions):
    try:
        with open(directions, 'rb') as image_file:
            exif_data = Image(image_file)
        return exif_data.gps_latitude, exif_data.gps_longitude
    except:
        return None


def asc_location(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_geo = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
    keyboard.add(button_geo)
    try:
        bot.send_message(message.chat.id, "–í–∫–ª—é—á–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é.", reply_markup=keyboard)
    except Exception as error_message:
        logging.error(str(error_message) + "  ‚îã  " + time.ctime() + "\n")


# -------------------------------------------------------------------------------------------------------------------------------------
@bot.message_handler(content_types=['location'])
def location(message):
    if message.location:
        try:
            output_data["pos"] = message.location
        except Exception as error_message:
            logging.error(str(error_message) + "  ‚îã  " + time.ctime() + "\n")


@bot.message_handler(commands=['start'])
def welcome(message):
    try:
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_appeal = types.KeyboardButton(text="–ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É")
        button_proposal = types.KeyboardButton(text="–í—ã–¥–≤–∏–Ω—É—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
        button_gratitude = types.KeyboardButton(text="–í—ã—Ä–∞–∑–∏—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å")
        keyboard.add(button_appeal, button_proposal, button_gratitude)
        bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)
    except Exception as error_message:
        logging.error(error_message + "  ‚îã  " + time.ctime() + "\n")


@bot.message_handler(commands=['help'])
def welcome(message):
    try:
        write_message(message, '!!! –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ–æ—Ä–º—ã !!!')
    except Exception as error_message:
        logging.error(error_message + "  ‚îã  " + time.ctime() + "\n")


@bot.message_handler(content_types=['text', 'photo'])
def start(message):
    global is_complain
    try:
        if message.text:
            ms = message.text.lower()
        else:
            ms = message.caption.lower()

        if ms in ["–ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É", "–≤—ã–¥–≤–∏–Ω—É—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "–≤—ã—Ä–∞–∑–∏—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å"]:
            if ms == "–ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É":
                write_message(message, '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É, –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –≤–∞—Å:\n'
                                       '1) –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—éüñº —Å –º–µ—Å—Ç–∞ –∂–∞–ª–æ–±—ã + –û–ø–∏—Å–∞–Ω–∏–µ –∂–∞–ª–æ–±—ã\n'
                                       '2) *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–æ–¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –º—ã –∑–Ω–∞–ª–∏, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–æ–±–ª–µ–º–∞')
                is_complain = True
                bot.register_next_step_handler(message, photo_download)

            elif ms == '–≤—ã–¥–≤–∏–Ω—É—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ':
                is_complain = False
                write_message(message, '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ')

            elif ms == '–≤—ã—Ä–∞–∑–∏—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å':
                is_complain = False
                write_message(message, '–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å')
        elif is_complain:
            is_complain = False
            output_data["complaint"] = ms

    except Exception as error_message:
        logging.error(str(error_message) + "  ‚îã  " + time.ctime() + "\n")


# -------------------------------------------------------------------------------------------------------------------------------------
bot.polling(none_stop=True, interval=0)

"""

1) –í—Å—Ç–∞–≤–∏—Ç—å —ç—Ç–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞:
    –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π.\n 
    –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞–ø–∏—à–∏—Ç–µ /help

2) –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø—ã –∏–ª–∏ —á—Ç–æ —Ç–∞–º –ø–æ –∑–∞–¥–∞–Ω–∏—é
"""
